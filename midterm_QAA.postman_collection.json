{
	"info": {
		"_postman_id": "ebdb1255-f565-48c5-a091-c62f667917b2",
		"name": "midterm_QAA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34403026"
	},
	"item": [
		{
			"name": "get authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(function (author) {\r",
							"        pm.expect(author.id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(author.idBook).to.exist.and.to.be.a('number');\r",
							"        pm.expect(author.firstName).to.exist.and.to.be.a('string');\r",
							"        pm.expect(author.lastName).to.exist.and.to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(function (author) {\r",
							"        pm.expect(author.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that idBook is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (author) {\r",
							"        pm.expect(author.idBook).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that firstName and lastName are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function (author) {\r",
							"        pm.expect(author.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"firstName should not be empty\");\r",
							"        pm.expect(author.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"lastName should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('idBook');\r",
							"    pm.expect(responseData).to.have.property('firstName');\r",
							"    pm.expect(responseData).to.have.property('lastName');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.13\",\r\n    \"title\": \"Unsupported Media Type\",\r\n    \"status\": 415,\r\n    \"traceId\": \"00-38d71e059ad8144eac948baeb59ea44a-61f78b5937ecfb4d-00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get author by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'idBook', 'firstName', 'lastName');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID Book is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.idBook).to.be.a('number');\r",
							"    pm.expect(responseData.idBook).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"First Name should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function (book) {\r",
							"        pm.expect(book).to.have.property('id');\r",
							"        pm.expect(book).to.have.property('idBook');\r",
							"        pm.expect(book).to.have.property('firstName');\r",
							"        pm.expect(book).to.have.property('lastName');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function (item) {\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID Book is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function (item) {\r",
							"        pm.expect(item.idBook).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"First Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function (author) {\r",
							"        pm.expect(author.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First Name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/authors/books/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"authors",
						"books",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body is empty or null\", function () {\r",
							"  const responseData = xml2Json(pm.response.text());\r",
							"  pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the request is successfully deleted\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('idBook');\r",
							"    pm.expect(responseData).to.have.property('firstName');\r",
							"    pm.expect(responseData).to.have.property('lastName');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IdBook is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBook).to.be.a('number');\r",
							"    pm.expect(responseData.idBook).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"FirstName should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"LastName should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 2000,\r\n  \"idBook\": 2000,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://fakerestapi.azurewebsites.net/index.html"
		},
		{
			"key": "url",
			"value": "https://fakerestapi.azurewebsites.net/api/v1/Authors"
		}
	]
}